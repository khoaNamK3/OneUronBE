// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OneUron.DAL.Data.Entity;

#nullable disable

namespace OneUron.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251006110320_AddPaymentAndFixQuiz")]
    partial class AddPaymentAndFixQuiz
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FeaturesMemberShipPlan", b =>
                {
                    b.Property<Guid>("FeaturesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberShipPlansId")
                        .HasColumnType("uuid");

                    b.HasKey("FeaturesId", "MemberShipPlansId");

                    b.HasIndex("MemberShipPlansId");

                    b.ToTable("FeaturesMemberShipPlan");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Acknowledge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Acknowledges");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionChoiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserQuizAttemptId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionChoiceId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserQuizAttemptId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Choice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EvaluationQuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationQuestionId");

                    b.ToTable("Choices");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.CourseDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<double>("Reviews")
                        .HasColumnType("double precision");

                    b.Property<string>("Students")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Update")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId")
                        .IsUnique();

                    b.ToTable("CourseDetails");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.EnRoll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EnrollDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Evaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.EvaluationQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EvaluationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationId");

                    b.ToTable("EvaluationQuestions");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Features", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Instructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.MemberShip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MemberShipPlanId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MemberShipPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("MemberShips");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.MemberShipPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Fee")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MemberShipPlans");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Method", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TimeInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Methods");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.MethodCon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Con")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MethodId");

                    b.ToTable("MethodCons");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.MethodPro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uuid");

                    b.Property<string>("Pro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MethodId");

                    b.ToTable("MethodPros");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.MethodRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MethodRuleConditionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MethodId");

                    b.HasIndex("MethodRuleConditionId");

                    b.ToTable("MethodRules");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.MethodRuleCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChoiceId")
                        .HasColumnType("uuid");

                    b.Property<double>("Effectiveness")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("EvaluationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EvaluationQuestionId")
                        .HasColumnType("uuid");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ChoiceId");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("EvaluationQuestionId");

                    b.ToTable("MethodRuleConditions");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MemberShipPlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MemberShipPlanId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.ProcessTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("ProcessTasks");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Point")
                        .HasColumnType("double precision");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.QuestionChoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionChoices");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("PassScore")
                        .HasColumnType("double precision");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.Property<double>("TotalPoints")
                        .HasColumnType("double precision");

                    b.Property<int>("TotalQuestion")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<double>("Reviews")
                        .HasColumnType("double precision");

                    b.Property<double>("Star")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AmountSubject")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TotalTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.StudyMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MethodId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("StudyMethods");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Priority")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Technique", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MethodId");

                    b.ToTable("Techniques");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.UserAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChoiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EvaluationQuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChoiceId");

                    b.HasIndex("EvaluationQuestionId");

                    b.HasIndex("UserId", "EvaluationQuestionId")
                        .IsUnique();

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.UserQuizAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Accuracy")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("FinishAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Point")
                        .HasColumnType("double precision");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("UserQuizAttempts");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("FeaturesMemberShipPlan", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Features", null)
                        .WithMany()
                        .HasForeignKey("FeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneUron.DAL.Data.Entity.MemberShipPlan", null)
                        .WithMany()
                        .HasForeignKey("MemberShipPlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Acknowledge", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Resource", "Resource")
                        .WithMany("Acknowledges")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Answer", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.QuestionChoice", "QuestionChoice")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionChoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OneUron.DAL.Data.Entity.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OneUron.DAL.Data.Entity.UserQuizAttempt", "UserQuizAttempt")
                        .WithMany("Answers")
                        .HasForeignKey("UserQuizAttemptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("QuestionChoice");

                    b.Navigation("UserQuizAttempt");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Choice", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.EvaluationQuestion", "EvaluationQuestion")
                        .WithMany("Choices")
                        .HasForeignKey("EvaluationQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EvaluationQuestion");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.CourseDetail", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Resource", "Resource")
                        .WithOne("CourseDetail")
                        .HasForeignKey("OneUron.DAL.Data.Entity.CourseDetail", "ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.EnRoll", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Resource", "Resource")
                        .WithMany("EnRolls")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OneUron.DAL.Data.Entity.User", "User")
                        .WithMany("EnRolls")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.EvaluationQuestion", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Evaluation", "Evaluation")
                        .WithMany("EvaluationQuestions")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Evaluation");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Instructor", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Resource", "Resource")
                        .WithMany("Instructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.MemberShip", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.MemberShipPlan", "MemberShipPlan")
                        .WithMany("MemberShips")
                        .HasForeignKey("MemberShipPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OneUron.DAL.Data.Entity.User", "User")
                        .WithMany("MemberShips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MemberShipPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.MethodCon", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Method", "Method")
                        .WithMany("MethodCons")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Method");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.MethodPro", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Method", "Method")
                        .WithMany("MethodPros")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Method");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.MethodRule", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Method", "Method")
                        .WithMany("MethodRules")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OneUron.DAL.Data.Entity.MethodRuleCondition", "MethodRuleCondition")
                        .WithMany("MethodRules")
                        .HasForeignKey("MethodRuleConditionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Method");

                    b.Navigation("MethodRuleCondition");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.MethodRuleCondition", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Choice", "Choice")
                        .WithMany("MethodRuleConditions")
                        .HasForeignKey("ChoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OneUron.DAL.Data.Entity.Evaluation", "Evaluation")
                        .WithMany("MethodRuleConditions")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OneUron.DAL.Data.Entity.EvaluationQuestion", "EvaluationQuestion")
                        .WithMany("MethodRuleConditions")
                        .HasForeignKey("EvaluationQuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Choice");

                    b.Navigation("Evaluation");

                    b.Navigation("EvaluationQuestion");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Payment", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.MemberShipPlan", "MemberShipPlan")
                        .WithOne("Payment")
                        .HasForeignKey("OneUron.DAL.Data.Entity.Payment", "MemberShipPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OneUron.DAL.Data.Entity.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MemberShipPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Process", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Schedule", "Schedule")
                        .WithMany("Processes")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.ProcessTask", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Process", "Process")
                        .WithMany("ProcessTasks")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Process");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Profile", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("OneUron.DAL.Data.Entity.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Question", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.QuestionChoice", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Question", "Question")
                        .WithMany("QuestionChoices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Quiz", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.User", "User")
                        .WithMany("Quizzes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Schedule", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.User", "User")
                        .WithMany("Schedules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Skill", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Resource", "Resource")
                        .WithMany("Skills")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.StudyMethod", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Method", "Method")
                        .WithOne("StudyMethod")
                        .HasForeignKey("OneUron.DAL.Data.Entity.StudyMethod", "MethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OneUron.DAL.Data.Entity.User", "User")
                        .WithMany("StudyMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Method");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Subject", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Process", "Process")
                        .WithMany("Subjects")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OneUron.DAL.Data.Entity.Schedule", "Schedule")
                        .WithMany("Subjects")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Process");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Technique", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Method", "Method")
                        .WithMany("Techniques")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Method");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Token", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.User", "User")
                        .WithOne("Token")
                        .HasForeignKey("OneUron.DAL.Data.Entity.Token", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.UserAnswer", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Choice", "Choice")
                        .WithMany("UserAnswers")
                        .HasForeignKey("ChoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OneUron.DAL.Data.Entity.EvaluationQuestion", "EvaluationQuestion")
                        .WithMany("UserAnswers")
                        .HasForeignKey("EvaluationQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OneUron.DAL.Data.Entity.User", "User")
                        .WithMany("UserAnswers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Choice");

                    b.Navigation("EvaluationQuestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.UserQuizAttempt", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Quiz", "Quiz")
                        .WithMany("UserQuizAttempts")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("OneUron.DAL.Data.Entity.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneUron.DAL.Data.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Choice", b =>
                {
                    b.Navigation("MethodRuleConditions");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Evaluation", b =>
                {
                    b.Navigation("EvaluationQuestions");

                    b.Navigation("MethodRuleConditions");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.EvaluationQuestion", b =>
                {
                    b.Navigation("Choices");

                    b.Navigation("MethodRuleConditions");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.MemberShipPlan", b =>
                {
                    b.Navigation("MemberShips");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Method", b =>
                {
                    b.Navigation("MethodCons");

                    b.Navigation("MethodPros");

                    b.Navigation("MethodRules");

                    b.Navigation("StudyMethod")
                        .IsRequired();

                    b.Navigation("Techniques");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.MethodRuleCondition", b =>
                {
                    b.Navigation("MethodRules");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Process", b =>
                {
                    b.Navigation("ProcessTasks");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("QuestionChoices");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.QuestionChoice", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserQuizAttempts");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Resource", b =>
                {
                    b.Navigation("Acknowledges");

                    b.Navigation("CourseDetail")
                        .IsRequired();

                    b.Navigation("EnRolls");

                    b.Navigation("Instructors");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.Schedule", b =>
                {
                    b.Navigation("Processes");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.User", b =>
                {
                    b.Navigation("EnRolls");

                    b.Navigation("MemberShips");

                    b.Navigation("Payments");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Quizzes");

                    b.Navigation("Schedules");

                    b.Navigation("StudyMethods");

                    b.Navigation("Token")
                        .IsRequired();

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("OneUron.DAL.Data.Entity.UserQuizAttempt", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
